import RPi.GPIO as G
import time 
import re
import argparse
import socket
import datetime

from luma.led_matrix.device import max7219
from luma.core.interface.serial import spi, noop
from luma.core.render import canvas
from luma.core.virtual import viewport
from luma.core.legacy import text, show_message
from luma.core.legacy.font import proportional, CP437_FONT, TINY_FONT, SINCLAIR_FONT, LCD_FONT
#----------------------------------------------------------------------------------------------------

HOST_MAIN = "192.168.0.50"
PORT_SERVER = 8000

def run():
    global inspectionCount, sock, partsNum, lastINS, modelChange
    
    G.setwarnings(False)
    G.setmode(G.BCM)
    G.setup(16,G.OUT)
    G.setup(20,G.OUT)
    G.setup(21,G.OUT)
    G.setup(13,G.IN)
    G.setup(19,G.IN)
    G.setup(26,G.IN)

    G.output(16,True)
    G.output(20,True)
    G.output(21,True)

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(5)
        sock.connect((HOST_MAIN,PORT_SERVER))
        sock.settimeout(None)
        print("connected.")
        sock.sendall("{} Connected".format("bus").encode('ascii'))

        while True:
            B_1 = G.input(13)
            B_2 = G.input(19)
            B_3 = G.input(26)
        
            if (B_1 == True):
                G.output(16,True)
                G.output(20,True)
                G.output(21,True)
                time.sleep(0.2)
                G.output(16,False)
                print("button 1 pressed")
            
                sock.sendall("{}".format("bus_stop1").encode("ascii"))
                time.sleep(0.5)
                data = sock.recv(1024)
                if not data:
                    break
                msg = data.decode("ascii")
                print(datetime.datetime.now(), msg)
                
                with canvas(device) as draw:
                    text(draw, (0, 0), msg, fill="white")
                    time.sleep(1)
        
            elif(B_2 == True):
                G.output(16,True)
                G.output(20,True)
                G.output(21,True)
                time.sleep(0.2)
                G.output(20,False)
                print("button 2 pressed")
                
                sock.sendall("{}".format("bus_stop2").encode("ascii"))
                time.sleep(0.5)
                data = sock.recv(1024)
                if not data:
                    break
                msg = data.decode("ascii")
                print(datetime.datetime.now(), msg)
                
                with canvas(device) as draw:
                    text(draw, (0, 0), msg, fill="white")
                    time.sleep(1)
        
            elif(B_3 == True):
                G.output(16,True)
                G.output(20,True)
                G.output(21,True)
                time.sleep(0.2)
                G.output(21,False)
                print("button 3 pressed")
                
                sock.sendall("{}".format("bus_stop3").encode("ascii"))
                time.sleep(0.5)
                data = sock.recv(1024)
                if not data:
                    break
                msg = data.decode("ascii")
                print(datetime.datetime.now(), msg)
                
                with canvas(device) as draw:
                    text(draw, (0, 0), msg, fill="white")
                    time.sleep(1)
            
        
        sock.close()
        print('disconnected')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='matrix arguments',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--cascaded', '-n', type=int, default=1, help='Number of cascaded MAX7219 LED matrices')
    parser.add_argument('--block-orientation', type=int, default=0, choices=[0, 90, -90], help='Corrects block orientation when wired vertically')
    parser.add_argument('--rotate', type=int, default=0, choices=[0, 1, 2, 3], help='Rotate display 0=0째, 1=90째, 2=180째, 3=270째')
    parser.add_argument('--reverse-order', type=bool, default=False, help='Set to true if blocks are in reverse order')

    args = parser.parse_args()

    try:
        serial = spi(port=0, device=0, gpio=noop())
        device = max7219(serial, cascaded=args.cascaded, block_orientation=args.block_orientation, rotate=args.rotate, blocks_arranged_in_reverse_order=args.reverse_order)
        print("Created device")
        run()
    except Exception as ex:
        time.sleep(1)
        print(ex)

